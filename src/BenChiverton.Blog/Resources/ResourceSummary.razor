@using System.Reflection
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime;

<div class="summary-container">
    <div class="name-text">@ResourceDetails.Name</div>
    @if (ResourceDetails.Downloads.Any())
    {
        <div class="downloads">
            @("Downloads: ")
            @foreach (var download in ResourceDetails.Downloads)
            {
                <a class="link" @onclick="async () => await DownloadFileFromDownloadsFolder(download.Key, download.Value)">[@download.Key]</a>
                @(" ")
            }
        </div>
    }
    @if (ResourceDetails.ResourceLinks.Any())
    {
        <div class="links">
            @("Links: ")
            @foreach (var link in ResourceDetails.ResourceLinks)
            {
                <a class="link" href="@link.Value" target="_blank">[@link.Key]</a>
                @(" ")
            }
        </div>
    }
    @if (ResourceDetails.Tags.Any())
    {
        <div class="tags">
            @("Tags: ")
            @string.Join(", ", ResourceDetails.Tags)
        </div>
    }
</div>

@code {
    [Parameter]
    public string ResourceId { get; set; }

    [Parameter]
    public ResourceDetails ResourceDetails { get; set; }


    private async Task DownloadFileFromDownloadsFolder(string fileName, string fileLocation)
    {
        var assembly = Assembly.GetExecutingAssembly();
        using var stream = assembly.GetManifestResourceStream(fileLocation);
        using var dotNetStreamRef = new DotNetStreamReference(stream);

        await _jsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, dotNetStreamRef);
    }
}
