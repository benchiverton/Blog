@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

<header>
    <div class="logo-container">
        <div class="logo" @onclick="@(() => Navigate(""))">BC's blogs</div>
    </div>
    <nav class="top-menu">
        <button class="nav-button" @onclick="@(() => Navigate("Blogs"))">
            Blogs
        </button>
        <button class="nav-button" @onclick="@(() => Navigate("Projects"))">
            Projects
        </button>
        <button class="nav-button" @onclick="@(() => Navigate("Resources"))">
            Resources
        </button>
        <button class="nav-button" @onclick="@(() => Navigate("About"))">
            About
        </button>
        <button class="nav-button" @onclick="@(async () => await NavigateToNewTab("https://www.linkedin.com/in/benjamin-chiverton/"))" formtarget="_blank">
            <SvgIcon Icon="IconType.LinkedIn" />
        </button>
    </nav>
    <div class="colour-theme-toggle-container">
        <select class="colour-theme-toggle-select" @onchange="ChangingTheme">
            @foreach (var colourTheme in Enum.GetValues<ColourTheme>())
            {
                <option selected="@IsInitialColourTheme(colourTheme)" value="@colourTheme">@colourTheme theme</option>
            }
        </select>
    </div>
</header>

@code {
    [Parameter]
    public ColourTheme InitialColourTheme { get; set; }
    [Parameter]
    public Action<ColourTheme> OnColourThemeChanged { get; set; }

    private void Navigate(string page)
    {
        _navigationManager.NavigateTo(page);
    }

    private async Task NavigateToNewTab(string url)
    {
        await _jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private bool IsInitialColourTheme(ColourTheme theme) => theme == InitialColourTheme;

    private void ChangingTheme(ChangeEventArgs e) => OnColourThemeChanged(Enum.Parse<ColourTheme>(e.Value.ToString()));
}
